########################################################################
# @configure_input@
########################################################################

PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@

AUTOCONF   = @AUTOCONF@
AUTOMAKE   = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@
ACLOCAL    = @ACLOCAL@

AWK      = @AWK@
GREP     = @GREP@
EGREP    = @EGREP@
SED      = @SED@

INSTALL_DATA    = @INSTALL_DATA@
INSTALL_DIR     = @INSTALL_DIR@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT  = @INSTALL_SCRIPT@

DIFF     = @DIFF@
DIFFSTAT = @DIFFSTAT@
DOXYGEN  = @DOXYGEN@
GIT      = @GIT@
INSTALL  = @INSTALL@
MKDIR_P  = @MKDIR_P@
PANDOC   = @PANDOC@
PYTHON3  = @PYTHON3@
TAR      = @TAR@
TPUT     = @TPUT@

@SET_MAKE@

prefix      = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
datadir     = @datadir@
bindir      = @bindir@
docdir      = @docdir@
mandir      = @mandir@
htmldir     = @htmldir@

man0dir = ${mandir}/man0
man1dir = ${mandir}/man1
man2dir = ${mandir}/man2
man3dir = ${mandir}/man3
man4dir = ${mandir}/man4
man5dir = ${mandir}/man5
man6dir = ${mandir}/man6
man7dir = ${mandir}/man7
man8dir = ${mandir}/man8
man9dir = ${mandir}/man9

srcdir = @srcdir@
VPATH  = @srcdir@


########################################################################
# The default target is "all"
########################################################################

.PHONY: all
all: all-targets


########################################################################
# Disable things built into make
########################################################################

.SUFFIXES:

COMPILE.c   = false COMPILE.c
COMPILE.cc  = false COMPILE.cc
COMPILE.cxx = false COMPILE.cxx
LINK.c      = false LINK.c
LINK.cc     = false LINK.cc
LINK.cxx    = false LINK.cxx


########################################################################
# Some vars
########################################################################

all-dist-files ?=
dist-files ?=


########################################################################
# Compiler and linker flags
########################################################################

CFLAGS   = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS  = @LDFLAGS@
LDADD    =

common_CFLAGS   =
common_CPPFLAGS =
common_LDFLAGS  =
common_LDADD    =

comma = ,


ifneq (,$(srcdir))
common_CPPFLAGS += -I.
common_CPPFLAGS += -I$(srcdir)
endif

common_CPPFLAGS += -DPACKAGE_TARNAME='"$(PACKAGE_TARNAME)"'
common_CPPFLAGS += -DPACKAGE_VERSION='"$(PACKAGE_VERSION)"'


########################################################################
# Local settings, verbosity infrastructure, and include package makefile
########################################################################

# Usage: $(eval $(call define-sed-substitution,docdir))
#        Must be defined for use in package.mk and local.mk.
define define-sed-substitution
SUBSTITUTIONS += -e 's|[@]$(1)@|$$($(1))|g'
endef

-include local.mk

V ?=

ifeq (0,$(V))
V =
endif

ifneq (,$(srcdir))
include $(srcdir)/package.mk
all-dist-files += $(srcdir)/package.mk
else
include package.mk
all-dist-files += package.mk
endif


########################################################################
# Rebuilding autoconf related files
########################################################################

configure_deps += configure.ac
configure_deps += aclocal.m4

$(srcdir)/configure: $(configure_deps)
	cd '$(srcdir)' && $(AUTOCONF)

$(srcdir)/aclocal.m4: $(aclocal_m4_deps)
	cd '$(srcdir)' && $(ACLOCAL) $$(if test -d auto-m4; then printf "%s\n" "-I auto-m4"; fi) $$(if test -d m4; then printf "%s\n" "-I m4"; fi)
$(aclocal_m4_deps):

# autoheader might not change auto-config.h.in, so touch a stamp file.
$(srcdir)/auto-config.h.in: stamp-h.in ;
$(srcdir)/stamp-h.in: configure.ac aclocal.m4
	cd '$(srcdir)' && $(AUTOHEADER)
	echo timestamp > '$(srcdir)/stamp-h.in'

auto-config.h: stamp-h ;
stamp-h: auto-config.h.in config.status
	./config.status

GNUmakefile: GNUmakefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck


########################################################################
# Developer documentation generated by doxygen
########################################################################

EXTRA_DIST += Doxyfile.in
CLEANFILES += Doxyfile

CLEANFILES += doxygen.stamp
.PHONY: doxygen.stamp
doxygen.stamp: Doxyfile $(wildcard *.c) $(wildcard *.h)
	$(inhibit-build-command)
	@$(call print-rule-description,DOXYGEN,html dox)
	cat $< $(if $(V),,| $(SED) -e 's!^QUIET *=.*!QUIET = YES!') | $(DOXYGEN) -
	echo > $@

dox: doxygen.stamp

.PHONY: serve-dox
serve-dox: dox
	@$(call print-rule-description,SERVING,doxygen html files,dox/html)
	$(PYTHON3) -m http.server --directory dox/html


########################################################################
# All the magical variables and functions
########################################################################

ifeq (,$(V))
$(info In case of build problems, try running `make' with V=1 to help find the cause.)
else
$(info /-----------------------------------------------------------------------)
$(info | common_CFLAGS=$(common_CFLAGS))
$(info | common_CPPFLAGS=$(common_CPPFLAGS))
$(info | common_LDADD=$(common_LDADD))
$(info | common_LDFLAGS=$(common_LDFLAGS))
$(info | CFLAGS=$(CFLAGS))
$(info | CPPFLAGS=$(CPPFLAGS))
$(info | LDADD=$(LDADD))
$(info | LDFLAGS=$(LDFLAGS))
$(info \-----------------------------------------------------------------------)
endif

DESTDIR ?=

install-dirs    =
all-targets     =
install-targets =

dir-vars = $(sort $(filter %dir,$(.VARIABLES)))
# $(info dir-vars = $(dir-vars))

am-dir-prefixes += $(patsubst %dir,%,$(dir-vars))
am-var-suffixes += DATA
am-var-suffixes += MANS
am-var-suffixes += PROGRAMS
am-var-suffixes += SCRIPTS


# Usage: $(eval $(call define-program-build-rule,src/beep-foo,src_beep_foo))
define define-program-build-rule
ifeq (2,$(V))
$$(info $(0): $(1) $(2))
endif

$(2)_CFLAGS   ?=
$(2)_CPPFLAGS ?=
$(2)_LDFLAGS  ?=
$(2)_LDADD    ?=

all-dist-files += $$($(2)_SOURCES)

$(2)_OBJS = $$(strip $$(foreach src,$$($(2)_SOURCES),\
$$(if $$(filter %.c,$$(src)),$$(patsubst %.c,.objs/$(2)/%.o,$$(src)),\
$$(if $$(filter %.h,$$(src)),,\
$$(error Unhandled source type in $(2)_SOURCES: $$(src))))))
# $$(info $(2)_OBJS = $$($(2)_OBJS))

CLEANFILES  += $(1)
CLEANFILES  += $(1).map
CLEANFILES  += $$($(2)_OBJS)

$(1): $$($(2)_OBJS)
	$$(inhibit-build-command)
	@$$(call print-rule-description,LINK,$$@)
	$$(CC) -Wl,-Map=$(1).map,--cref $$(common_CFLAGS) $$(CFLAGS) $$(common_LDFLAGS) $$($(2)_LDFLAGS) $$(LDFLAGS) -o $$@ $$^ $$(common_LDADD) $$(LDADD) $$($(2)_LDADD)

$$(patsubst .objs/$(2)/%.o,.deps/$(2)/%.o.dep,$$($(2)_OBJS)):

-include $$(patsubst .objs/$(2)/%.o,.deps/$(2)/%.o.dep,$$($(2)_OBJS))

.objs/$(2)/%.o: %.c | .deps/$(2) .objs/$(2)
	$$(inhibit-build-command)
	@$$(call print-rule-description,COMPILE,$$(<F),FOR,$(1))
	$$(CC) -MT $$@ -MMD -MP -MF .deps/$(2)/$$*.o.dep $$(common_CPPFLAGS) $$($(2)_CPPFLAGS) $$(CPPFLAGS) $$(common_CFLAGS) $$($(2)_CFLAGS) $$(CFLAGS) -o $$@ -c $$<

.deps/$(2):
	$$(inhibit-build-command)
#	@$$(call print-rule-description,MKDIR_P,$$@)
	@$$(MKDIR_P) $$@

.objs/$(2):
	$$(inhibit-build-command)
#	@$$(call print-rule-description,MKDIR_P,$$@)
	@$$(MKDIR_P) $$@
endef


# Usage: $(eval $(call define-build-rules-for-DATA,doc_DATA,docdir,DATA))
define define-build-rules-for-DATA
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
endef


# Usage: $(eval $(call define-build-rules-for-MANS,doc_MANS,docdir,MANS))
define define-build-rules-for-MANS
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
endef


# Usage: $(eval $(call define-build-rules-for-SCRIPTS,bin_SCRIPTS,bindir,SCRIPTS))
define define-build-rules-for-SCRIPTS
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
endef


# Usage: $(eval $(call define-build-rules-for-PROGRAMS,bin_PROGRAMS,bindir,PROGRAMS))
define define-build-rules-for-PROGRAMS
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
$$(foreach prog,$$($(1)),$$(eval $$(call define-program-build-rule,$$(prog),$$(subst /,_,$$(subst -,_,$$(prog))))))
endef


# Usage: $(eval $(call define-file-install-rule,INSTALL_PROGRAM,src/beep-foo,bindir))
define define-file-install-rule
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
install-dirs    += $$(DESTDIR)$$($(3))
install-targets += $$(DESTDIR)$$($(3))/$$(notdir $(2))
$$(DESTDIR)$$($(3))/$$(notdir $(2)): $(2) | $$(DESTDIR)$$($(3))
	@$$(call print-rule-description,$$(or $$(if $$(findstring INSTALL_PROGRAM,$(1)),INSTALL_PRG),$$(if $$(findstring INSTALL_DATA,$(1)),INSTALL_DAT),$(1)),$$(patsubst $$(prefix)%,\$$$$(prefix)%,$$@))
	$$($(1)) $$< $$@
endef


# Usage: $(eval $(call define-data-install-rule,README.md,docdir))
define define-data-install-rule
ifeq (2,$(V))
$$(info $(0): $(1) $(2))
endif
$$(eval $$(call define-file-install-rule,INSTALL_DATA,$(1),$(2)))
endef


# Usage: $(eval $(call define-executable-install-rule,src/beep-foo,bindir))
define define-executable-install-rule
ifeq (2,$(V))
$$(info $(0): $(1) $(2))
endif
$$(eval $$(call define-file-install-rule,INSTALL_PROGRAM,$(1),$(2)))
endef


# Usage: $(eval $(call define-install-rules-for-PROGRAMS,bin_PROGRAMS,bindir,PROGRAMS))
define define-install-rules-for-PROGRAMS
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
$$(foreach prog,$$($(1)),$$(eval $$(call define-executable-install-rule,$$(prog),$(2))))
endef


# Usage: $(eval $(call define-install-rules-for-SCRIPTS,bin_SCRIPTS,bindir,SCRIPTS))
define define-install-rules-for-SCRIPTS
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
$$(foreach script,$$($(1)),$$(eval $$(call define-executable-install-rule,$$(script),$(2))))
endef


# Usage: $(eval $(call define-install-rules-for-DATA,doc_DATA,docdir,DATA))
define define-install-rules-for-DATA
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
$$(foreach file,$$($(1)),$$(eval $$(call define-data-install-rule,$$(file),$(2))))
endef


# Usage: $(eval $(call define-install-rules-for-MANS,man1_MANS,man1dir,MANS))
define define-install-rules-for-MANS
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
$$(foreach file,$$($(1)),$$(if $$(findstring $$(suffix $$(file)),$$(patsubst man%dir,.%,$(2))),$$(eval $$(call define-data-install-rule,$$(file),$(2))),$$(error man page name mismatch for $(2): $$(file))))
endef


# Usage: $(eval $(call handle-am-var,bin_PROGRAMS,bin,PROGRAMS))
define handle-am-var
ifeq (2,$(V))
$$(info $(0): $(1) $(2) $(3))
endif
ifeq (check,$(2))
check-targets += $$($(1))
else
all-targets += $$($(1))
endif
subst-dir-names += $(2)dir
$$(eval $$(call define-build-rules-for-$(3),$(1),$(2)dir,$(3)))
$$(if $(filter check noinst,$(2)),,$$(eval $$(call define-install-rules-for-$(3),$(1),$(2)dir,$(3))))
endef


$(foreach varname,$(filter-out INSTALL_DATA,$(.VARIABLES)),$(if $(filter $(am-var-suffixes),$(lastword $(subst _, ,$(varname)))),$(eval $(call handle-am-var,$(varname),$(firstword $(subst _, ,$(varname))),$(lastword $(subst _, ,$(varname)))))))


define define-install-dir-rule
ifeq (2,$(V))
$$(info $(0): $(1))
endif
$$(DESTDIR)$(1):
	@$$(call print-rule-description,INSTALL_DIR,$$(patsubst $$(prefix)%,\$$$$(prefix)%,$$@/))
	$$(INSTALL_DIR) $$@
endef

$(foreach dir,$(sort $(install-dirs)),$(eval $(call define-install-dir-rule,$(dir))))


$(foreach dirname,$(sort $(subst-dir-names)),$(eval $(call define-sed-substitution,$(dirname))))


########################################################################
# "make dist" and related targets
########################################################################

ifeq (,$(srcdir))
EXTRA_DIST += $(wildcard tests/README.md)
EXTRA_DIST += $(wildcard tests/run-tests)
EXTRA_DIST += $(wildcard tests/*.bash)
EXTRA_DIST += $(wildcard tests/*.sh)
EXTRA_DIST += $(wildcard tests/*.expected.[0-9])
else
EXTRA_DIST += $(wildcard $(srcdir)/tests/README.md)
EXTRA_DIST += $(wildcard $(srcdir)/tests/run-tests)
EXTRA_DIST += $(wildcard $(srcdir)/tests/*.bash)
EXTRA_DIST += $(wildcard $(srcdir)/tests/*.sh)
EXTRA_DIST += $(wildcard $(srcdir)/tests/*.expected.[0-9])
endif

EXTRA_DIST += testbuild-all

EXTRA_DIST += .gitignore
EXTRA_DIST += .github/workflows/beep-build.yml

all-dist-files += Makefile.am

dist-files += auto-config.h.in
all-dist-files += configure.ac
all-dist-files += compile-check.c
dist-files += configure
all-dist-files += GNUmakefile.in
all-dist-files += stamp-h.in

dist-files += auto-aux/compile
dist-files += auto-aux/config.guess
dist-files += auto-aux/config.sub
dist-files += auto-aux/install-sh
dist-files += auto-aux/missing

distdir = $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)

# $(info FINAL BUILT_SOURCES = $(BUILT_SOURCES))
# $(info FINAL all-dist-files = $(all-dist-files))
# $(info FINAL dist-files = $(dist-files))
sorted-dist-files = $(filter-out $(BUILT_SOURCES),$(sort $(all-dist-files) $(dist-files) $(EXTRA_DIST)))
# $(info FINAL sorted-dist-files = $(sorted-dist-files))

verbose-tar =
verbose-tar = --verbose --show-transformed-names

$(distdir).tar.gz: $(sorted-dist-files)
	$(TAR) --dereference --transform='s|^$(srcdir:../%=%)/||' --transform='s|^$(srcdir:/%=%)/||' --transform='s|^|$(distdir)/|' --auto-compress --create --file=$@ $(verbose-tar) $^

distcheck: distcheck-transitivity
.PHONY: distcheck-transitivity
distcheck-transitivity: $(distdir).tar.gz
	rm -rf __tmp
	mkdir __tmp
	mkdir __tmp/s && cd __tmp/s && tar xf ../../$(distdir).tar.gz
	mkdir __tmp/t && cd __tmp/t && ../s/$(distdir)/configure
	cd __tmp/t && make dist
	mkdir __tmp/a && cd __tmp/a && tar xf ../../$(distdir).tar.gz
	test -s __tmp/a/$(distdir)/configure
	mkdir __tmp/b && cd __tmp/b && tar xf  ../t/$(distdir).tar.gz
	test -s __tmp/b/$(distdir)/configure
	$(DIFF) -ruN __tmp/a/$(distdir) __tmp/b/$(distdir)


########################################################################
# Consistency checks
########################################################################

check-targets += check-GNUmakefile-substitutions
.PHONY: check-GNUmakefile-substitutions
check-GNUmakefile-substitutions:
	if $(EGREP) '[@][A-Za-z_][A-Za-z0-9_]*@' GNUmakefile; then \
	  echo "Error: GNUmakefile constains unsubstituted patterns."; \
	  exit 1; \
	fi


########################################################################
# The phony targets
########################################################################

.PHONY: all-targets
all-targets: $(all-targets)

.PHONY: check-targets
check-targets: $(check-targets)

.PHONY: check
check: tests/run-tests beep all-targets check-targets
	@$(call print-rule-description,CHECK,$${PWD}/beep)
	env PACKAGE_VERSION="${PACKAGE_VERSION}" \
	/bin/bash $< $(<D) $${PWD}/beep

.PHONY: clean
clean:
	@$(call print-rule-description,CLEANUP,all built files)
	rm -f $(CLEANFILES)
	rm -rf .deps .objs __tmp
	rm -f tests/*.new tests/*.actual
	rm -f *.i *.lst *.o *.s

.PHONY: distclean
distclean: clean
	rm -f GNUmakefile auto-config.h config.log config.status stamp-h

.PHONY: dist
dist: $(distdir).tar.gz

.PHONY: distcheck
distcheck: dist

.PHONY: install
install: all $(install-targets)

# This is for use with the "install-nobuild" target.
#
# For every recipe which creates/modifies a file in the build tree,
# use $(inhibit-build-command) as the first command.
#
# The default value of @: produces no output and succeeds, so that the
# further recipe lines can actually do the work.
#
# If you want to disable build, set this to "false" or "false
# 'comment'", so that each invoked build rule will fail instantly
# before doing any actual work.
inhibit-build-command = @:

.PHONY: install-nobuild
install-nobuild: install
install-nobuild : inhibit-build-command=@printf "Error: 'make install-nobuild' inhibits all build rules.\n       Try running 'make' to build $@ first, or run\n       'make install' which implicitly builds $@ first.\n"; false

.PHONY: uninstall
uninstall:
	@$(call print-rule-description,UNINSTALL,all installed files)
	rm -f $(foreach target,$(install-targets),$(DESTDIR)$(target))


########################################################################
# Substitute files
########################################################################

substitute-vars += PACKAGE_TARNAME
substitute-vars += PACKAGE_VERSION
$(foreach var,$(substitute-vars),$(eval $(call define-sed-substitution,$(var))))


SUBSTITUTIONS += -e 's|[@]configure_input@|$@.  Generated from $< by configure.|g'

%: %.in GNUmakefile
	$(inhibit-build-command)
	@$(call print-rule-description,SUBSTITUTE,$(<F),TO,$(@))
	@$(if $(V),printf "%s %s < %s > %s\n" "$(SED)" "$(SUBSTITUTIONS)" "$<" "$@",:); \
	$(SED) $(SUBSTITUTIONS) < $< > $@.$$$$.new; \
	if $(EGREP) '[@]([A-Za-z][A-Za-z0-9_]*)@' $@.$$$$.new; then \
	  echo "Error: GNUmakefile fails to substitute some of the variables in \`$<'."; \
	  rm -f $@.$$$$.new; \
	  exit 1; \
	fi; \
	mv -f $@.$$$$.new $@


########################################################################
# git related development helpers
########################################################################

# Only have make deal with those variables and rules if this is a git
# repo, and if the git executable has been found.
ifneq (,$(srcdir))
GIT_INFO_EXCLUDE = $(firstword $(wildcard $(srcdir)/.git/info/exclude))
else
GIT_INFO_EXCLUDE = $(firstword $(wildcard .git/info/exclude))
endif
# $(info GIT_INFO_EXCLUDE = $(GIT_INFO_EXCLUDE))
ifneq ($(strip $(GIT_INFO_EXCLUDE)),)
# $(info origin GIT = $(origin GIT))
# $(info GIT = $(GIT))

ifdef GIT

# List all references to documentation in the git repo
.PHONY: refs
refs:
	$(GIT) grep -n -E '((http|https)://[a-zA-Z0-9\._/-]+|([A-Z]+\.md)|([a-zA-Z][a-zA-Z0-9_-]+\([0-9]+\)))'

# List all TODOs and FIXMEs in the git repo
.PHONY: todo fixme
todo fixme:
	$(GIT) grep -n -E '(TODO:|FIXME:|\\todo\s|@todo\s)'

# Generate a kind of dist tarball to help with preparing for release
PACKAGE_TARBASE = $(eval PACKAGE_TARBASE := $$(PACKAGE_TARNAME)-$$(shell $$(GIT) describe --tags | $$(SED) 's/^v\([0-9]\)/\1/'))$(PACKAGE_TARBASE)
.PHONY: git-dist
git-dist:
	@$(call print-rule-description,GIT ARCHIVE,$(PACKAGE_TARBASE).tar.gz)
	set -e; outdir="$$PWD"; if test "x$(srcdir)" != "x"; then cd "$(srcdir)"; fi; \
	$(GIT) archive --format=tar.gz --prefix=$(PACKAGE_TARBASE)/ --output="$${outdir}/$(PACKAGE_TARBASE).tar.gz" HEAD

# Check that the lists of files inside the "git archive" and the "tar"
# dist tarballs are the same.
.PHONY: compare-tarballs
distcheck: compare-tarballs
compare-tarballs: dist git-dist
	@$(call print-rule-description,COMPARE,contents of git archive and dist tarball)
	rm -rf tarball-dist tarball-git-dist
	mkdir tarball-dist     && cd tarball-dist     && $(TAR) xf ../$(distdir).tar.gz
	mkdir tarball-git-dist && cd tarball-git-dist && $(TAR) xf ../$(PACKAGE_TARBASE).tar.gz
	if diff -ruN $(foreach fn,$(dist-files),-x $(fn)) tarball-git-dist/$(PACKAGE_TARBASE) tarball-dist/$(distdir) > compare-tarballs.patch; then \
		rm -f compare-tarballs.patch; \
	else \
		cat compare-tarballs.patch; \
		$(DIFFSTAT) $$(if test -t 1; then printf "-C\n"; fi) < compare-tarballs.patch; \
		exit 1; \
	fi
	rm -rf tarball-dist tarball-git-dist

endif
endif


########################################################################
# Print rule descriptions and silent rules
#
# This is a bit more complex than mad scientist's simple silent
# rules[1]:
#
#   * In silent mode, we print aligned descriptions for each target
#     being built.
#
#   * In non-silent mode, we print a description of the recipe before
#     each recipe is actually run, but highlighted a bit to stand out
#     from the endless sequence of recipe command text: The description
#     line always starts with a "#", and on a TTY, it will be printed
#     in bold.
#
# [1]: http://make.mad-scientist.net/managing-recipe-echoing/
########################################################################

# Set V to empty to disable silent rules, non-empty to enable them.
V=1
V=

# Note that we cannot use "test -t 1" inside a $(shell ) command, as
# the $(shell) will capture stdout into a variable, so the "test -t 1"
# will always test negative.

ifeq (,$(V))
.SILENT:
print-rule-description = $(or\
$(if $(4),printf "%13s %-22s %-5s %s\n" "$(1)" "$(2)" "$(3)" "$(4)"),\
$(if $(3),printf "%13s %-22s %s\n" "$(1)" "$(2)" "$(3)"),\
$(if $(2),printf "%13s %s\n" "$(1)" "$(2)"),\
$(error $(0) requires at least two parameters))
else
set-color-vars = if test -t 1; then cb="$$($(TPUT) bold)"; cn="$$($(TPUT) sgr0)"; fi
print-rule-description = $(set-color-vars); $(or\
$(if $(4),printf "%s# %s %s %s %s%s\n" "$$cb" "$(1)" "$(2)" "$(3)" "$(4)" "$$cn"),\
$(if $(3),printf "%s# %s %s %s%s\n" "$$cb" "$(1)" "$(2)" "$(3)" "$$cn"),\
$(if $(2),printf "%s# %s %s%s\n" "$$cb" "$(1)" "$(2)" "$$cn"),\
$(error $(0) requires at least two parameters))
endif


########################################################################
# End of GNUmakefile.
########################################################################
